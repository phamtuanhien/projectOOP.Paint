/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint;

/**
 *
 * @author Tuan Hien
 */

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import javax.swing.JLabel;
import shape.Bucket;
import shape.Eraser;
import shape.Line;
import shape.Oval;
import shape.Pencil;
import shape.Polygon;
import shape.Rectangle;
import shape.RightTriangle;
import shape.RoundRect;
import shape.Triangle;

public class PaintPanel extends javax.swing.JPanel implements MouseListener, MouseMotionListener{

    /**
     * Creates new form DrawPanel
    */
    Graphics2D g2d, g2; // doi tuong do hoa
    private BufferedImage buff_img; // anh de ve
    private boolean isSaved;
    private Point startPoint,  endPoint;
    private JLabel jCoordinate;
    private Line line;
    private Oval oval;
    private Eraser eraser;
    private Rectangle rect;
    private RoundRect roundRect;
    private Triangle triangle;
    private RightTriangle rightTriangle;
    private Polygon polygon;
    private Pencil pencil;
    private Bucket bucket;
    private String mode;
    private int x = 0;
    public PaintPanel(int width, int height) {
        initComponents();
        
        mode = new String("PENCIL");
        pencil = new Pencil();
        line = new Line();
        oval = new Oval();
        rect = new Rectangle();
        roundRect = new RoundRect();
        triangle = new Triangle();
        rightTriangle = new RightTriangle();
        polygon = new Polygon();
        eraser = new Eraser();
        bucket = new Bucket();
        startPoint = new Point();
        endPoint = new Point();
        
        buff_img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        this.setSize(width, height);
        this.setLocation(5, 5);
        
        g2d = (Graphics2D) buff_img.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setColor(new Color(255, 255, 255));
        g2d.fillRect(0, 0, width, height);
        
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
    }
    private void doDrawing(Graphics g) {
        g2 = (Graphics2D) g;
        g2.drawImage(buff_img, null, 0, 0);   
        switch(mode) {
            case "LINE":
                line.draw(g2);
                break;
            case "OVAL":
                oval.draw(g2);
                break;
            case "RECTANGLE":
                rect.draw(g2);
                break;
            case "ROUNDRECTANGLE":
                roundRect.draw(g2);
                break;
            case "TRIANGLE":
                triangle.draw(g2);
                break;
            case "RIGHTTRIANGLE":
                rightTriangle.draw(g2);
                break;
            case "POLYGON":
                line.draw(g2);
        }
    }
    public void setImage(BufferedImage img) {
        buff_img = img;
        g2d = (Graphics2D) buff_img.createGraphics();
        isSaved = true;
        this.setSize(buff_img.getWidth(), buff_img.getHeight());
        this.revalidate();
        this.repaint();
    }
    public BufferedImage getImage() {
        return buff_img;
    }
    public void setCoordinate(JLabel jCoordinate) {
        this.jCoordinate = jCoordinate;
    }
    public void setMode(String mode) {
        this.mode = mode;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        doDrawing(g);      
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        endPoint = e.getPoint();
        switch(mode) {
            case "BUCKET":
                bucket.addArrPoint(endPoint);
                bucket.setColor(Color.BLACK);
                bucket.setPoint(endPoint, endPoint);
                bucket.draw(buff_img);
                
        }
        repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        startPoint = e.getPoint();
        switch(mode) {
            case "PENCIL":
                pencil.setPoint(startPoint, startPoint);
                pencil.setStrokeColor(Color.BLACK);
                pencil.draw(g2d);
                break;
            case "ERASER":
                eraser.setPoint(startPoint, startPoint);
                eraser.setStrokeColor(Color.WHITE);
                eraser.setSize(10);
                eraser.draw(g2d);
                break;
            case "LINE":
                line.setStrokeColor(Color.yellow);
                break;
            case "OVAL":
                oval.setFillColor(Color.yellow);
                break;
            case "RECTANGLE":
                rect.setStrokeColor(Color.yellow);
                break;
            case "ROUNDRECTANGLE":
                roundRect.setStrokeColor(Color.yellow);
                break;
            case "TRIANGLE":
                triangle.setStrokeColor(Color.yellow);
                break;
            case "RIGHTTRIANGLE":
                rightTriangle.setStrokeColor(Color.yellow);
                break;
            case "POLYGON":
                line.setStrokeColor(Color.yellow);
                break;
                
        }
        repaint();
    }
    @Override
    public void mouseReleased(MouseEvent e) {
        startPoint = null;
        endPoint = null;
        switch(mode) {
            case "LINE":
                line.draw(g2d);
                break;
            case "OVAL":
                oval.draw(g2d);
                break;
            case "RECTANGLE":
                rect.draw(g2d);
                break;
            case "ROUNDRECTANGLE":
                roundRect.draw(g2d);
                break;
            case "TRIANGLE":
                triangle.draw(g2d);
                break;
            case "RIGHTTRIANGLE":
                rightTriangle.draw(g2d);
                break;
            case "POLYGON":
                polygon.draw(g2d);
                
        }
        repaint();
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        jCoordinate.setText("");
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        jCoordinate.setText(e.getX() + ", " + e.getY() + " px");
        endPoint = e.getPoint();
        switch(mode) {
            case "SELECT":
                break;
            case "PENCIL":
                pencil.setPoint(startPoint, endPoint);
                startPoint = endPoint;       
                pencil.draw(g2d);
                break;
            case "COLORPICKER":
                break;
            case "ERASER":
                eraser.setPoint(endPoint, endPoint);
                eraser.draw(g2d);
                break;
            case "TEXT":
                break;
            case "BUCKET":
                break;
            case "MAGNIFIER":
                break;
            case "CURVE":
                break;
            case "POLYGON":
                line.setPoint(startPoint, endPoint);
                break;
            case "LINE":
                line.setPoint(startPoint, endPoint);
                break;
            case "OVAL":
                oval.setPoint(startPoint, endPoint);
                break;
            case "RECTANGLE":
                rect.setPoint(startPoint, endPoint);
                break;
            case "ROUNDRECTANGLE":
                roundRect.setPoint(startPoint, endPoint);
                break;
            case "TRIANGLE":
                triangle.setPoint(startPoint, endPoint);
                break;
            case "RIGHTTRIANGLE":
                rightTriangle.setPoint(startPoint, endPoint);
                break;
        }
        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        jCoordinate.setText(e.getX() + ", " + e.getY() + " px");
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
